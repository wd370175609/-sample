trick:
1.当不能用经典模板的时候，如何写if else？ 现在尝试举例，希望通过后续练习找寻规律。
2.规律：
因为start+(end-start)/2 最后是向左趋近，所以end可以等于mid也可以使end能够向左趋近，start=mid+1。参考Maximum Number in Mountain Sequence。 
good ex: 参考lc 302。 (302 can still be resolved by the common way, which is using (start + 1 < end) as condition. -- Updated in 2022)
3.考虑什么情况数会被删掉。例如 start=mid+1, 那么在某个if的情况下，所有不满足这个if的值都会被删掉。如lc378的count的例子, lc528
4. while loop start 和 end的关系， 例子： lc 215 start<=end here  as we need to check again when start == end
5.出现死循环的情况是 start = mid + 1, end = mid, start + (end - start + 1)/2   
                  end = mid - 1, start = mid, start + (end -start)/2  
                  举find first item which is smaller than target and find first item which is larger than target就可以得知

例如：lc540
3.start + (end - start) / 2 won't overflow if start and end are large positive numbers. With signed operands, overflow is undefined:
int start = 0x7ffffffe, end = 0x7fffffff;
int mid = start + (end - start) / 2; // works as expected
int mid = (start + end) / 2;         // overflow... undefined
参考First Bad Version: lc 278

all the relative questions:

正常递增序列：
参考this.  那几道题
find first element: 可以用start<end解决 不存在死循环，因为start+end)/2靠左，并且start=mid+1，所以start一定会接近于end
find last element: 不能用start<end解决， 存在死循环，因为此时end=mid-1， start=midm, 但是start+end)/2可能导致mid一直卡在start的位置，无法接近end 
search for a range:lc 34
Single Element in a Sorted Array: lc540 这道题比较trick，没有明确移动的判断基准，需要举例来寻找左右移动的条件。
First Bad Version: lc 278

rotated array: (找出条件来判断mid在哪个区间)
Find Minimum in Rotated Sorted Array: leetcode 153 得用nums[end]做为判断条件而不是nums[start],因为要考虑1，2，3，4的情况。
Find Minimum in Rotated Sorted Array II: lc154 多加一句话，防止nums[end]==nums[start]情况的出现
Search in Roated Sorted Array: leetcode 33    分成四个区间
Maximum Number in Mountain Sequence: https://www.lintcode.com/problem/maximum-number-in-mountain-sequence/description


questions about matrix:
Search 2D matrix: 
1.lc 74 (比较经典2D)
2.lc 240;  (上下左右都得满足递增，解法是考虑右上角的数）
3.Kth Smallest Element in a Sorted Matrix: lc 378 it is tricky to find the target. 

Smallest Rectangle Enclosing Black Pixels https://www.lintcode.com/problem/smallest-rectangle-enclosing-black-pixels/description



乱序数组的binary search：
Minimum Size Subarray Sum: lc209
Find Peak Element: leetcode 162


找k个element
Find K Closest Elements: lc 658 (specific for the loop condition, need to be remembered)
Kth Smallest Number in Multiplication Table:lc 668
Kth Smallest Element in a Sorted Matrix: lc 378 it is tricky to find the target. 


others:
Is Subsequence: lc 392
Minimize Max Distance to Gas Station: lc 774


summary:
API: 
Collections.binarySearch()





